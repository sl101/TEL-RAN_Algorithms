// 1. Вычислить n-й член последовательности, заданной формулами:
// a(n) = sqrt(a(n-1)*a(n-1) + a(n-2)*a(n-2)),
// a0 = a1 = 1.

function foo(n) {
  if(n == 0) return 1;
  if(n == 1) return 1;

    return Math.sqrt(foo(n -1) * foo(n-1) + foo(n - 2) * foo(n - 2));
  }

console.log(foo(20));

cache = [];
cache[0] = 1;
cache[1] = 1;

// memory estimate O(n)
function fooTab(n) {

  for (let i = 2; i <= n; i++) {
    cache[i] = Math.sqrt(cache[i-1] * cache[i-1] + cache[i - 2] * cache[i - 2])
  }
  return cache[n]
}

console.log(fooTab(20));

//
// 1. Вычислить n-й член последовательности, заданной формулами:
// a(n) = sqrt(a(n-1)*a(n-1) + a(n-2)*a(n-2)),
// a0 = a1 = 1.

(n = 0) a(0) = a0 = 1
(n = 1) a(1) = a1 = 1
(n = 2) a(2) = sqrt( a(1) * a(1) + a(0) * a(0)) = sqrt(2)
(n = 3) a(3) = sqrt( a(2) * a(2) + a(1) * a(1)) = sqrt ( sqrt(2) * sqrt(2) + 1 * 1 ) = sqrt(3)
(n = 4) a(4) = sqrt( a(3) * a(3) + a(2) * a(2)) = sqrt(5)

[1, 1, sqrt(2), sqrt(3), sqrt(5)]


// Самый дешёвый путь
// В каждой клетке прямоугольной таблицы N*M записано некоторое число.
// Изначально игрок находится в левой верхней клетке.
// За один ход ему разрешается перемещаться в соседнюю клетку либо вправо, либо вниз (влево и вверх перемещаться запрещено).
// При проходе через клетку игрок платит определенную сумму, какое число записано в этой клетке.
// Требуется найти минимальную стоимость пути, отдав которую игрок может попасть в правый нижний угол.

pathCost = [
  [0, 1, 1, 0, 3, 9, 0, 3, 9, 0, 3, 9, 0, 3, 9, 0, 3, 9],
  [1, 1, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
  [7, 8, 2, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0],
];



